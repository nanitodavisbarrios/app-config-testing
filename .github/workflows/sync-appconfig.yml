name: Sync Azure App Configuration (no OIDC) - BU repo

on:
  workflow_dispatch:
    inputs:
      targetEnv:
        description: "Environment (dev/test/prod)"
        required: true
        default: "dev"

permissions:
  contents: read

jobs:
  sync:
    runs-on: ubuntu-latest
    environment: ${{ inputs.targetEnv }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build JSON and push keys (Feature:AutoUpdate, Feature:DataExplorer)
        uses: azure/cli@v2
        with:
          # If you want, pin the CLI version:
          # azcliversion: 2.62.0
          inlineScript: |
            # safer bash flags (no -u to avoid empty GH vars causing exit)
            set -eo pipefail

            # Let az auto-install missing extensions (e.g., appconfig)
            az config set extension.use_dynamic_install=yes_without_prompt
            az --version

            # ---- Inputs from GitHub Environment (secrets/vars) ----
            CS='${{ secrets.APPCONFIG_CONNECTION_STRING }}'
            LABEL_RAW='${{ vars.TARGET_LABEL }}'

            # Defaults for optional vars (so missing vars don't break the run)
            AUTO_SCRIPT='${{ vars.AUTO_UPDATE_SCRIPT }}'
            AUTO_REPORT='${{ vars.AUTO_UPDATE_REPORT }}'
            AUTO_SAVE='${{ vars.AUTO_UPDATE_SAVE_FULL_REPORT }}'
            AUTO_EMAIL='${{ vars.AUTO_UPDATE_SEND_EMAIL }}'

            DEX_READ_ROLE='${{ vars.DEX_READ_ROLE }}'
            DEX_MODIFY_ROLE='${{ vars.DEX_MODIFY_ROLE }}'
            STORAGE_ACCOUNT='${{ vars.STORAGE_ACCOUNT }}'
            SHARE_USERCONTENT='${{ vars.SHARE_USERCONTENT }}'

            # Fallbacks if any var is empty (purely to make first runs easy)
            : "${AUTO_SCRIPT:=VEStudioC.schedule}"
            : "${AUTO_REPORT:=laststatuses.txt}"
            : "${AUTO_SAVE:=false}"
            : "${AUTO_EMAIL:=false}"
            : "${DEX_READ_ROLE:=DDT_DataExplorer}"
            : "${DEX_MODIFY_ROLE:=DDT_DataExplorer_Modify}"
            : "${STORAGE_ACCOUNT:=storageaccountname}"
            : "${SHARE_USERCONTENT:=usercontent}"

            if [ -z "$CS" ]; then
              echo "ERROR: APPCONFIG_CONNECTION_STRING is not set in this GitHub Environment."
              exit 1
            fi

            # Normalize label: _NO_LABEL_ or empty => write with no label
            if [ -z "${LABEL_RAW:-}" ] || [ "$LABEL_RAW" = "_NO_LABEL_" ]; then
              LABEL=""
            else
              LABEL="$LABEL_RAW"
            fi
            labelFlag=()
            if [ -n "$LABEL" ]; then
              labelFlag+=(--label "$LABEL")
              echo "Using label: $LABEL"
            else
              echo "Using NO label"
            fi

            # Find a python interpreter inside the container
            PYTHON=$(command -v python3 || command -v python || true)
            if [ -z "$PYTHON" ]; then
              echo "ERROR: No python interpreter found in the Azure CLI container."
              exit 1
            fi

            # ---------- Build JSON values with python -c (no heredocs, no YAML issues) ----------
            AUTO_JSON="$("$PYTHON" -c 'import json,os; print(json.dumps({
              "ScriptFileName": os.environ.get("AUTO_SCRIPT",""),
              "ReportFileName": os.environ.get("AUTO_REPORT",""),
              "SaveFullReport": os.environ.get("AUTO_SAVE",""),
              "SendReportByEmail": os.environ.get("AUTO_EMAIL","")
            }, separators=(",",":")))' )"

            DEX_JSON="$("$PYTHON" -c 'import json,os
            acct=os.environ.get("STORAGE_ACCOUNT","")
            share="usercontent"
            unc_base=f"\\\\\\\\{acct}.file.core.windows.net\\{share}" if acct else f"\\\\\\\\.invalid\\{share}"
            print(json.dumps({
              "ReadRole": os.environ.get("DEX_READ_ROLE",""),
              "RequiredRoleToModify": os.environ.get("DEX_MODIFY_ROLE",""),
              "QueriesFolder": unc_base + "\\\\Queries",
              "HighlightsFolder": unc_base + "\\\\Highlights"
            }, separators=(",",":")))' )"

            # ---------- Upsert JSON keys ----------
            az appconfig kv set \
              --connection-string "$CS" \
              --key "Feature:AutoUpdate" \
              "${labelFlag[@]}" \
              --value "$AUTO_JSON" \
              --content-type "application/json" \
              --yes

            az appconfig kv set \
              --connection-string "$CS" \
              --key "Feature:DataExplorer" \
              "${labelFlag[@]}" \
              --value "$DEX_JSON" \
              --content-type "application/json" \
              --yes
